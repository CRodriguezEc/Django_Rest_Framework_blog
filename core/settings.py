import environ
import os
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#   Instanciamos la libreria
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, 'core/.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

#   APLICACIONES PROPIAS DE DJANGO
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

#   LAS APLICACIONES PROPIAS DEL PROYECTO
PROJECT_APPS = [
    'apps.blog',
]

#   APLICACIONES DE 3ros COMO FRAMEWORKS, LIBRERIAS...
THIRD_PARTY_APPS = [
    'rest_framework',
    'channels',
    'ckeditor',
    'ckeditor_uploader',
    'django_celery_results',
]

#   UNION DE LOS APLICACIONES SEGMENTADAS
INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

CKEDITOR_CONFIGS = {"default":{"toolbar": "full", "autoParagraph": False}}
CKEDITOR_UPLOAD_PATH = "media/"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

#   Indica la ubicación del objeto ASGI que representa la aplicación web principal
ASGI_APPLICATION = 'core.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DATABASE_NAME'),
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASSWORD'),
        'HOST': env('DATABASE_HOST'), # nombre del contenedor
        'PORT': 5432
    }
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'django_db',
#         'USER': 'django',
#         'PASSWORD': 'postgres',
#         'HOST': 'postgresql', # nombre del contenedor
#         'PORT': 5432
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_LOCATION = 'static'
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join( BASE_DIR, "static" )

#   Directorio de ubicacion de archivos de imagen o archivos multimedia
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join( BASE_DIR, "media" )

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#   PARAMETRIZAMOS LA AUTENTICACION AL "API"
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES":[
        #   Si un usuario esta autenticado puede hacer uso del API completo, caso contrario solo hace uso de los metodos GET
        #   "rest_framework.permissions.IsAuthenticatedOrReadOnly"
        
        #   Cualquier usuario puede hacer uso del API completo
        "rest_framework.permissions.AllowAny"
    ]
}


#   Proporcionan un mecanismo para que múltiples instancias de 
#   una aplicación Django Channels se comuniquen y compartan información. 
CHANNELS_LAYERS = {
    "default": {
        "BACKEND": "channel_redis.core.RedisChannelLayer",
        "CONFIG": {
            "host": [env('REDIS_URL')]
        }
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        #   Se elimina una "s", para que trabaje con una URL normal (sin TLS)
        "LOCATION": env('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    }
}

#   Configuración que define qué orígenes (URLs) están permitidos para realizar solicitudes a un proyecto basado en Channels
#   Esencialmente, ayuda a controlar el Acceso de Recursos de Origen Cruzado (CORS) para proteger tu aplicación contra ataques maliciosos
CHANNELS_ALLOWED_ORIGINS = "http://localhost:3000"

########################
# PARAMETRIZACION CELERY
########################

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "America/Guayaquil"

CELERY_BROKER_URL = env("REDIS_URL")
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600
    ,   'socket_timeout': 5
    ,   'retry_on_timeout': True
}

CELERY_RESULT_BACKEND = 'django_db'
CELERY_CACHE_BACKEND = 'default'

CELERY_IMPORTS = (
    'core.task',
)